(ns math (:pragma "0.8.29"))

(storage
 {:internal [
 
 (def result [(x mut :u256)])
 (def truth [(t :bool)])
 (def temp [(t :addr)])
 (def buyer [(t :addr)])
 ]})

(events [(def Event [])])

(constants
 {:external [
 
 (def NUMBER [(x :u256)] 15)
 
 ]})

(functions
 {:external [

 (defn addi [(x :u256) (y :u256)] @sto{:w 0 :r 0} (-> [(f mut :u256)])
   (-> f (+ x y)))

 (defn divi [(x :u256) (y :u256)] @sto{:w 0 :r 0} (-> [(f mut :u256)])
   (-> f (/ x y)))

 (defn msgSender [] @sto{:w 0 :r 0} (-> [(s mut :addr)])
   (-> s (caller)))

 (defn msgValue [] @sto{:w 0 :r 0} (-> [(s mut :u256)])
   (-> s (callvalue)))

 (defn txOrigin [] @sto{:w 0 :r 0} (-> [(o mut :addr)])
   (-> o (origin)))

 (defn reader [] @sto{:w 0 :r 1} (-> [(r mut :addr)])
   (-> r (sto read! temp)))

 (defn checks [(c :bool)] @sto{:w 0 :r 1} (-> [])
   (do (assert c)
       (require (sto read! truth) 404)))

 (defn letting [(z :u256)] @sto{:w 0 :r 0} (-> [(r mut :u256)])
   (let [bruh 15
        y z]
     (do (set! y 22)
	  (-> r (+ bruh y)))))

 (defn invoking [(z :u256)] @sto{:w 0 :r 0} (-> [(r mut :u256)])
   (-> r (invoke! addi z z)))

 (defn emitting [] @sto{:w 0 :r 0} (-> [])
   (emit! Event []))

 (defn transferring [(to :addr) (fake mut :bool)] @sto{:w 0 :r 0} (-> [])
   (transfer* to (/ (callvalue) 2)))

 (defn letComplex [] @sto{:w 0 :r 1} (-> [(r mut :u256)])
   (let [c (+ (sto read! result) 5)]
     (-> r c)))

 (defn letCond [(input :u256)] @sto{:w 0 :r 1} (-> [(r mut :bool)])
   (let [c (= (sto read! result) input)]
     (-> r c)))

 (defn ez [] @sto{:w 0 :r 1} (-> [])
   (assert (= (sto read! truth) (sto read! truth))))

 (defn onlyBuyer [] @sto{:w 0 :r 1} (-> [])
   (assert (= (caller) (sto read! buyer))))

 (defn whatif [(cond :bool)] @sto{:w 1 :r 0} (-> [])
   (if cond
       (sto write! result 228)
       (revert 404)))

 (defn writting [] @sto{:w 1 :r 0} (-> [])
   (invoke! transferring NUMBER false))
 ]
 })
