(ns ownable (:pragma "0.8.29"))

(constructor
 (sto write! owner "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"))

(events
 [
  (def OwnershipTransferred [(prevOwner :addr) (newOwner :addr)])])

(constants
 {:internal
 [
 (def ADDRESS_ZERO [(x :addr)] "0x0000000000000000000000000000000000000000")
 ]})

(storage
 {:external
  [
   (def owner [(x mut :addr)])
   ]})

(functions
 {:external
  [
   (defn transferOwnership [(newOwner :addr)] (-> [])
     (do
       (invoke! _checkOwner)
       (assert (!= newOwner ADDRESS_ZERO))
       (invoke! _transferOwnership newOwner)))
   
   (defn renounceOwnership [] (-> [])
     (do (invoke! _checkOwner)
         (invoke! _transferOwnership ADDRESS_ZERO)))
   ]

  :internal
  [
   ;; Throws if the sender is not the owner.
   (defn _checkOwner [] (-> [])
     (assert (= (caller) (sto read! owner))))

   (defn _transferOwnership [(newOwner :addr)] (-> [])
     (let [oldOwner (sto read! owner)]
       (do
         (sto write! owner newOwner)
         (emit! OwnershipTransferred [oldOwner newOwner]))))
   ]})
